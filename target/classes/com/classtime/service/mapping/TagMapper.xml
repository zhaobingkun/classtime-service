<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.classtime.service.dao.TagMapper">
    <resultMap id="BaseResultMap" type="com.classtime.service.model.Tag">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="cateid" property="cateid" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="BIT"/>
        <result column="sortnum" property="sortnum" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, name, cateid, status, sortnum
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from tag
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from tag
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.classtime.service.model.Tag">
        insert into tag (id, name, cateid,
        status, sortnum)
        values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{cateid,jdbcType=INTEGER},
        #{status,jdbcType=BIT}, #{sortnum,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.classtime.service.model.Tag">
        insert into tag
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="cateid != null">
                cateid,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="sortnum != null">
                sortnum,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="cateid != null">
                #{cateid,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                #{status,jdbcType=BIT},
            </if>
            <if test="sortnum != null">
                #{sortnum,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.classtime.service.model.Tag">
        update tag
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="cateid != null">
                cateid = #{cateid,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=BIT},
            </if>
            <if test="sortnum != null">
                sortnum = #{sortnum,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.classtime.service.model.Tag">
        update tag
        set name = #{name,jdbcType=VARCHAR},
        cateid = #{cateid,jdbcType=INTEGER},
        status = #{status,jdbcType=BIT},
        sortnum = #{sortnum,jdbcType=INTEGER}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectBySelective" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from tag
        <where>
            <if test="cateid != null">
                cateid = #{cateid,jdbcType=INTEGER}
            </if>
            <if test="status != null">
                and status = #{status,jdbcType=BIT}
            </if>
        </where>
        order by sortnum asc ,id desc
    </select>
    <select id="selectByResourceid" resultMap="BaseResultMap" parameterType="map">
           select t.id, t.name, t.cateid,t.status, t.sortnum
        from tag t,tag_resources p
        where  t.cateid = #{cateid,jdbcType=INTEGER}  AND t.status!=0 AND t.id=p.tagid
       and p.resourcesid = #{resourcesid,jdbcType=BIGINT}
        order by t.sortnum asc,t.id desc
    </select>
</mapper>